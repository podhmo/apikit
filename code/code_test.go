package code

import (
	"fmt"
	"io"
	"reflect"
	"strings"
	"testing"

	"github.com/podhmo/apikit/pkg/difftest"
	"github.com/podhmo/apikit/pkg/tinypkg"
)

func TestCodeEmitCode(t *testing.T) {
	pkg := tinypkg.NewPackage("foo", "")
	config := DefaultConfig()
	cases := []struct {
		msg  string
		code *Code
		want string
	}{
		{
			msg: "no-import",
			code: config.NewCode(pkg, "", func(w io.Writer, c *Code) error {
				fmt.Fprintln(w, `func Hello() string { return "hello" }`)
				return nil
			}),
			want: `
// Code generated by "github.com/podhmo/apikit"; DO NOT EDIT.


package foo


func Hello() string { return "hello" }`,
		},
		{
			msg: "with-import",
			code: func() *Code {
				code := config.NewCode(pkg, "", func(w io.Writer, c *Code) error {
					fmt.Fprintln(w, `func Hello(ctx context.Context) string { return "hello" }`)
					return nil
				})
				code.ImportPackages = func(collector *tinypkg.ImportCollector) error {
					return collector.Add(pkg.Import(tinypkg.NewPackage("context", "")))
				}
				return code
			}(),
			want: `
// Code generated by "github.com/podhmo/apikit"; DO NOT EDIT.


package foo

import (
	"context"
)

func Hello(ctx context.Context) string { return "hello" }`,
		},
		{
			msg: "without-header",
			code: func() *Code {
				c := DefaultConfig()
				c.Header = ""
				return c.NewCode(pkg, "", func(w io.Writer, c *Code) error {
					fmt.Fprintln(w, `func Hello() string { return "hello" }`)
					return nil
				})
			}(),
			want: `
package foo


func Hello() string { return "hello" }`,
		},
	}

	for _, c := range cases {
		t.Run(c.msg, func(t *testing.T) {
			var buf strings.Builder
			emitter := &CodeEmitter{Code: c.code}
			if err := emitter.Emit(&buf); err != nil {
				t.Fatalf("unexpected error %+v", err)
			}
			if want, got := difftest.NormalizeString(c.want), difftest.NormalizeString(buf.String()); want != got {
				difftest.LogDiffGotStringAndWantString(t, got, want)
			}
		})
	}
}

func TestCodeUseAsSymbol(t *testing.T) {
	pkg := tinypkg.NewPackage("foo", "")
	main := tinypkg.NewPackage("main", "")
	config := DefaultConfig()

	cases := []struct {
		msg  string
		here *tinypkg.Package
		code *Code

		want        string
		wantImports []*tinypkg.ImportedPackage
	}{
		{
			msg:  "same package",
			here: pkg,
			code: config.NewCode(pkg, "Foo", func(w io.Writer, c *Code) error {
				fmt.Fprintln(w, "func Foo() string")
				return nil
			}),
			want: "Foo",
		},
		{
			msg:  "another package",
			here: main,
			code: config.NewCode(pkg, "Foo", func(w io.Writer, c *Code) error {
				fmt.Fprintln(w, "func Foo() string")
				return nil
			}),
			want:        "foo.Foo",
			wantImports: []*tinypkg.ImportedPackage{main.Import(pkg)},
		},
		{
			msg:  "depends",
			here: main,
			code: func() *Code {
				// foo.Foo, main.Bar is defined
				// and define main.Use() function.
				fooCode := config.NewCode(pkg, "Foo", func(w io.Writer, c *Code) error {
					fmt.Fprintln(w, "type Foo struct {}")
					return nil
				})
				barCode := config.NewCode(main, "Bar", func(w io.Writer, c *Code) error {
					fmt.Fprintln(w, "type Bar struct {}")
					return nil
				})
				useCode := config.NewCode(main, "Use", func(w io.Writer, c *Code) error {
					fmt.Fprintf(w, "func Use(foo %s, bar %s) error { return nil }\n",
						tinypkg.ToRelativeTypeString(main, fooCode),
						tinypkg.ToRelativeTypeString(main, barCode),
					)
					return nil
				})
				useCode.depends = append(useCode.depends, fooCode, barCode) // this is important!
				return useCode
			}(),
			want:        "Use",
			wantImports: []*tinypkg.ImportedPackage{main.Import(pkg)},
		},
	}

	for _, c := range cases {
		c := c
		t.Run(c.msg, func(t *testing.T) {
			// symbol
			{
				got := tinypkg.ToRelativeTypeString(c.here, c.code)
				if want := c.want; want != got {
					t.Errorf("want type string:\n\t%q\nbug got:\n\t%q", want, got)
				}
			}

			// imports
			{
				collector := tinypkg.NewImportCollector(c.here)
				if err := c.code.CollectImports(collector); err != nil {
					t.Errorf("unexpected error for collect import")
				}
				imports := collector.Imports
				if want, got := c.wantImports, imports; !reflect.DeepEqual(want, got) {
					t.Errorf("want imports:\n\t%+v\nbug got:\n\t%+v", want, got)
				}
			}
		})
	}
}

func TestMergeCode(t *testing.T) {
	config := DefaultConfig()
	config.Header = ""
	pkg := tinypkg.NewPackage("foo", "")

	foo := config.NewCode(pkg, "Foo", func(w io.Writer, c *Code) error {
		c.Import(tinypkg.NewPackage("fmt", "fmt"))
		fmt.Fprintln(w, `
func Foo() {
	fmt.Println("foo")
}
		`)
		return nil
	})
	bar := config.NewCode(pkg, "Foo", func(w io.Writer, c *Code) error {
		c.Import(tinypkg.NewPackage("fmt", "fmt"))
		c.Import(tinypkg.NewPackage("strings", "strings"))
		fmt.Fprintln(w, `
func Bar() {
	Foo()
	fmt.Println(strings.Repeat("bar", 2))
}
		`)
		return nil
	})

	t.Run("base", func(t *testing.T) {
		var buf strings.Builder
		if err := (&CodeEmitter{foo}).Emit(&buf); err != nil {
			t.Errorf("unexpected error: %+v", err)
			return
		}
		want := `
package foo

import (
	"fmt"
)


func Foo() {
	fmt.Println("foo")
}`
		if want, got := difftest.NormalizeString(want), difftest.NormalizeString(buf.String()); want != got {
			difftest.LogDiffGotStringAndWantString(t, want, got)
		}
	})

	t.Run("merged", func(t *testing.T) {
		foo.AddDependency(bar) // side-effect!

		var buf strings.Builder
		if err := (&CodeEmitter{foo}).Emit(&buf); err != nil {
			t.Errorf("unexpected error: %+v", err)
			return
		}
		want := `
package foo

import (
	"fmt"
	"strings"
)


func Foo() {
	fmt.Println("foo")
}


func Bar() {
	Foo()
	fmt.Println(strings.Repeat("bar", 2))
}
`
		if want, got := difftest.NormalizeString(want), difftest.NormalizeString(buf.String()); want != got {
			difftest.LogDiffGotStringAndWantString(t, want, got)
		}
	})
}
