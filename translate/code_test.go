package translate

import (
	"fmt"
	"io"
	"reflect"
	"strings"
	"testing"

	"github.com/podhmo/apikit/pkg/difftest"
	"github.com/podhmo/apikit/pkg/tinypkg"
)

func TestCodeEmitCode(t *testing.T) {
	pkg := tinypkg.NewPackage("foo", "")
	config := DefaultConfig()
	cases := []struct {
		msg  string
		code *Code
		want string
	}{
		{
			msg: "no-import",
			code: config.NewCode(pkg, "", func(w io.Writer) error {
				fmt.Fprintln(w, `func Hello() string { return "hello" }`)
				return nil
			}),
			want: `
// Code generated by "github.com/podhmo/apikit"; DO NOT EDIT.


package foo


func Hello() string { return "hello" }`,
		},
		{
			msg: "with-import",
			code: func() *Code {
				code := config.NewCode(pkg, "", func(w io.Writer) error {
					fmt.Fprintln(w, `func Hello(ctx context.Context) string { return "hello" }`)
					return nil
				})
				code.ImportPackages = func() ([]*tinypkg.ImportedPackage, error) {
					return []*tinypkg.ImportedPackage{
						pkg.Import(tinypkg.NewPackage("context", "")),
					}, nil
				}
				return code
			}(),
			want: `
// Code generated by "github.com/podhmo/apikit"; DO NOT EDIT.


package foo

import (
	"context"
)

func Hello(ctx context.Context) string { return "hello" }`,
		},
		{
			msg: "without-header",
			code: func() *Code {
				c := DefaultConfig()
				c.Header = ""
				return c.NewCode(pkg, "", func(w io.Writer) error {
					fmt.Fprintln(w, `func Hello() string { return "hello" }`)
					return nil
				})
			}(),
			want: `
package foo


func Hello() string { return "hello" }`,
		},
	}

	for _, c := range cases {
		t.Run(c.msg, func(t *testing.T) {
			var buf strings.Builder
			if err := c.code.Emit(&buf); err != nil {
				t.Fatalf("unexpected error %+v", err)
			}
			if want, got := strings.TrimSpace(c.want), strings.TrimSpace(buf.String()); want != got {
				difftest.LogDiffGotStringAndWantString(t, got, want)
			}
		})
	}
}

func TestCodeUseAsSymbol(t *testing.T) {
	pkg := tinypkg.NewPackage("foo", "")
	main := tinypkg.NewPackage("main", "")
	config := DefaultConfig()

	cases := []struct {
		msg  string
		here *tinypkg.Package
		code *Code

		want        string
		wantImports []*tinypkg.ImportedPackage
	}{
		{
			msg:  "same package",
			here: pkg,
			code: config.NewCode(pkg, "Foo", func(w io.Writer) error {
				fmt.Fprintln(w, "func Foo() string")
				return nil
			}),
			want: "Foo",
		},
		{
			msg:  "another package",
			here: main,
			code: config.NewCode(pkg, "Foo", func(w io.Writer) error {
				fmt.Fprintln(w, "func Foo() string")
				return nil
			}),
			want:        "foo.Foo",
			wantImports: []*tinypkg.ImportedPackage{main.Import(pkg)},
		},
	}

	for _, c := range cases {
		c := c
		t.Run(c.msg, func(t *testing.T) {
			// symbol
			{
				got := tinypkg.ToRelativeTypeString(c.here, c.code)
				if want := c.want; want != got {
					t.Errorf("want type string:\n\t%q\nbug got:\n\t%q", want, got)
				}
			}

			// imports
			{
				collector := tinypkg.NewImportCollector(c.here)
				if err := tinypkg.Walk(c.code, collector.Collect); err != nil {
					t.Errorf("unexpected error for collect import")
				}
				if want, got := c.wantImports, collector.Imports; !reflect.DeepEqual(want, got) {
					t.Errorf("want imports:\n\t%+v\nbug got:\n\t%+v", want, got)
				}
			}
		})
	}
}
