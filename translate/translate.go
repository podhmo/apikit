package translate

import (
	"fmt"
	"io"
	"reflect"

	"github.com/podhmo/apikit/pkg/tinypkg"
	"github.com/podhmo/apikit/resolve"
)

const (
	priorityFirst   = -10
	prioritySecond  = -1
	priorityDefault = 0
)

type EmitCodeFunc func(w io.Writer, code *Code) error

type Config struct {
	Header       string
	EmitCodeFunc EmitCodeFunc

	Resolver *resolve.Resolver
}

func DefaultConfig() *Config {
	c := &Config{
		Header:   Header,
		Resolver: resolve.NewResolver(),
	}
	c.EmitCodeFunc = c.defaultEmitCodeFunc
	return c
}

const Header = `// Code generated by "github.com/podhmo/apikit"; DO NOT EDIT.

`

func (c *Config) defaultEmitCodeFunc(w io.Writer, code *Code) error {
	fmt.Fprintln(w, Header)
	fmt.Fprintf(w, "package %s\n\n", code.Here.Name)
	if err := code.EmitImports(w); err != nil {
		if err != ErrNoImports {
			return err
		}
	} else {
		io.WriteString(w, "\n")
	}
	return code.EmitCode(w)
}

func (c *Config) NewCode(
	here *tinypkg.Package,
	name string,
	emitCode func(w io.Writer) error,
) *Code {
	return &Code{
		Name:     name,
		Here:     here,
		EmitCode: emitCode,
		Config:   c,
	}
}

type Translator struct {
	Tracker     *Tracker
	Resolver    *resolve.Resolver
	Config      *Config
	providerVar *tinypkg.Var // TODO: from config
}

func NewTranslator(config *Config) *Translator {
	tracker := NewTracker()
	return &Translator{
		Tracker:  tracker,
		Resolver: config.Resolver,
		Config:   config,
	}
}

func (t *Translator) Override(name string, providerFunc interface{}) (prev *resolve.Def, err error) {
	rt := reflect.TypeOf(providerFunc)
	if rt.Kind() != reflect.Func {
		return nil, fmt.Errorf("unexpected providerFunc, only function %v", rt)
	}
	return t.Tracker.Override(rt.Out(0), name, t.Resolver.Def(providerFunc)), nil
}
